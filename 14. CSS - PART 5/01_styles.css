#container {
  height: 600px;
  width: 60%;
  background-color: azure;
  margin: 10px auto;
  border: 2px solid black;
  display: flex;
  /* display: flex; -- enables to sub elements to fit only into this dont overflow without considering their own hights and widths */
  /* flex-direction: row --  main axis - left to right */
  /* flex-direction: row-reverse -- main axis -right to left  */
  /* flex-direction: column -- main axis - top to bottom */
  /* flex-direction: column-reverse -- main axis -  bottom to top */
  flex-direction: row;
  /* by default it is row wise we can set it to row, row-rever, column, column-reverse */
  text-align: center;
  /* Justify Content
  Tells how the browser distributes space between and around content items along the main-axis
  • justify-content : flex-start - starts all the elements from this direction;
  • justify-content : flex-end;
  • justify-content : center;  -- arranges elements in the centre of main axis
    Justify Content
  • justify-content : space-between; -- only spaces are arranged in between
  • justify-content : space-around; -- equal spaces in between and half of that at ends
  • justify-content : space-evenly; -- equal spaces in between and same at ends
  */
  justify-content: flex-start;
  flex-wrap: nowrap;

  /* Flex Wrap
  Sets whether flex items are forced onto one line or can wrap onto multiple lines
  • flex-wrap : nowrap;
  • flex-wrap : wrap;
  • flex-wrap : wrap-reverse; -- wrap along cross axis reverse direction*/

  align-items: normal;

  /* Align Items
  Distributes our items along the cross axis
  • align-items : flex-start; -- shifts elements at top
  • align-items : flex-end;   -- shifts elements at bottom
  • align-items : center;     -- shifts elements at center
    align-items: baseline;    -- align according to same level of content present in element like all text is at same level
  */
  align-content: flex-start;
  /* Align Content
  it sets the distribution of space between and around content items along a flexbox's cross-axis
  • align-content : flex-start / flex-end / center
  • align-content  space-between / space-around / evenly
  • align-content : baseline; */
}

h1 {
  text-align: center;
}

#container div {
  height: 100px;
  width: 70px;
  /* if height and width of div is combinely less than overall div then all arranged according to top left corner */
  text-align: center;
  color: white;
  font-size: 1.5em;
}

#orange {
  align-self: baseline;
  /* Align Self
  align-self > align-items -- priority

  Aligns an item along the cross axis
  • align-self : flex-start;
  • align-self : flex-end;
  • align-self : center;
  • align-self : baseline;
  */
  flex-basis: none; /*depends on flex direction to expand row wise or column wise*/
  /* It sets the initial main size of a flex item. */
  flex-grow: none;
  /* It specifies how much of the flex container's remaining space should be assigned to the flex item's main size */
  min-width: none; /*sets min/max width while growing or shrinking*/
  flex-shrink: none;
  flex: 2 2 100px;
}

    /* Flex Shorthand
    • flex-grow | flex-shrink | flex-basis
    flex : 2 2 100px;

    • flex-grow | flex-basis
    flex : 2 100px;

    • flex-grow (unitless)
    flex : 2,

    • flex-basis
    flex : 1OOpx; */

#blue {
  flex-basis: none;
  flex-grow: none;
  flex-shrink: none;
  flex: 2 2 100px;
}
